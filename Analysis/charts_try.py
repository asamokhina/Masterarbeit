#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Charts
"""

import matplotlib.pyplot as plt
import numpy as np
import matplotlib.mlab as mlab
import csv
import pandas as pd
from pandas import DataFrame
from scipy.stats import chisquare

FILENAME = 'analysis_test.txt'
HEADERS=["Name", "Born", "Party", "Bundesland", "Gender", "Age"]

class entry:
    def __init__(self, name, born, party, bundesland, gender, age):
        self.name = name.encode("utf-8")
        self.born = born
        self.party = party
        self.bundesland = bundesland
        self.gender = gender
        self.age = int(age)
        # self.cl0 = int(cl0)
        # self.cl1 = int(cl1)
        # self.cl2 = int(cl2)
        # self.clsum = int(clsum)
    def __repr__(self):
        return "{} {} {} {} {} {}".format(self.name, self.born, self.party, self.bundesland, self.gender, self.age)

def get_data(filename):
    data = []
    with open(FILENAME, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        next(reader, None) # Skip header
        for row in reader:
            data.append(entry(name=row[0], born=row[1], party=row[2], bundesland=row[3], gender=row[4], age=row[5]))
    return data

#  def make_pie(data):
#      genders = {
#          'Male': len([f for f in data if f.gender.lower() == 'male']),
#          'Female': len([f for f in data if f.gender.lower() == 'female']),
#      }
#      gender_data = [genders[f] for f in genders.keys()]
#      assert sum(gender_data) == len(data)
#      colors = ['gold', 'yellowgreen']
#      plt.pie(gender_data, labels=genders.keys(), colors=colors,
#              autopct='%1.1f%%', shadow=True, startangle=140)
#      plt.axis('equal')
#      plt.title('Gender Distribution')
#      plt.show()

# def pie_words(data):
#     labels = 'Personal information', 'Political and economical information'
#     sizes = [4376, 5656]
#     colors = ['gold', 'yellowgreen']
#     plt.pie(sizes, labels=labels, colors=colors,
#             autopct='%1.1f%%', shadow=True, startangle=140)
#     plt.axis('equal')
#     plt.title('Proportion of clusters')
#     plt.show()

# def make_pie_state(data):
#     bundesland = {
#         'Hamburg': len([m for m in data if m.bundesland.lower() == 'hamburg']),
#         'Niedersachsen': len([m for m in data if m.bundesland.lower() == 'niedersachsen']),
#         'Bayern': len([m for m in data if m.bundesland.lower() == 'bayern']),
#         'Saarland': len([m for m in data if m.bundesland.lower() == 'saarland']),
#         'Schleswig-Holstein': len([m for m in data if m.bundesland.lower() == 'schleswig-holstein']),
#         'Baden-Württemberg': len([m for m in data if m.bundesland.lower() == 'baden-württemberg']),
#         'Nordrhein-Westfalen': len([m for m in data if m.bundesland.lower() == 'nordrhein-westfalen']),
#         'Rheinland-Pfalz': len([m for m in data if m.bundesland.lower() == 'rheinland-pfalz']),
#         'Hessen': len([m for m in data if m.bundesland.lower() == 'hessen']),
#         'Mecklenburg-Vorpommern': len([m for m in data if m.bundesland.lower() == 'mecklenburg-vorpommern']),
#         'Hessen': len([m for m in data if m.bundesland.lower() == 'hessen']),
#         'Sachsen': len([m for m in data if m.bundesland.lower() == 'sachsen']),
#         'Sachsen-Anhalt': len([m for m in data if m.bundesland.lower() == 'sachsen-anhalt']),
#         'Bremen': len([m for m in data if m.bundesland.lower() == 'bremen']),
#         'Berlin': len([m for m in data if m.bundesland.lower() == 'berlin']),
#         'Brandenburg': len([m for m in data if m.bundesland.lower() == 'brandenburg']),
#     }
#     bundesland_data = [bundesland[m] for m in bundesland.keys()]
# #    assert sum(bundesland_data) == len(data)
#     colors = ['gold', 'yellowgreen', 'coral', 'skyblue', 'purple' ]
#     plt.pie(bundesland_data, labels=bundesland.keys(), colors=colors,
#             autopct='%1.1f%%', shadow=True, startangle=140)
#     plt.axis('equal')
#     plt.title('State Distribution')
# #    plt.legend( loc = 'upper right', labels=['%s, %0.1f %%' % (l, s) for l, s in zip(bundesland, bundesland_data)])
#     plt.show()

# def make_histogram(data):
#     ages = [f.age for f in data]
#     num_bins = 10
#     n, bins, patches = plt.hist(ages, num_bins, facecolor='blue', alpha=0.5, edgecolor='black', linewidth=0.5)
#     plt.xlim([20, 90])
#     plt.title('Age Distribution')
#     plt.show()

def make_histogram_words(data):
    numbers = [30,
    13,
    29,
    46,
    23,
    17,
    24,
    3,
    21,
    16,
    7,
    16,
    14,
    1,
    39,
    3,
    23,
    46,
    16,
    12,
    18,
    10,
    19,
    32,
    10,
    12,
    16,
    23,
    15,
    20,
    16,
    20,
    18,
    13,
    4,
    19,
    22,
    14,
    21,
    18,
    22,
    20,
    7,
    22,
    9,
    4,
    22,
    44,
    10,
    8,
    11,
    16,
    24,
    22,
    10,
    8,
    23,
    13,
    17,
    28,
    9,
    21,
    5,
    21,
    26,
    21,
    6,
    19,
    9,
    29,
    6,
    8,
    14,
    9,
    19,
    24,
    34,
    2,
    20,
    41,
    15,
    19,
    11,
    21,
    2,
    2,
    20,
    7,
    11,
    18,
    7,
    7,
    1,
    20,
    16,
    10,
    16,
    5,
    18,
    11,
    16,
    11,
    8,
    11,
    15,
    24,
    3,
    16,
    32,
    26,
    11,
    16,
    1,
    4,
    18,
    18,
    11,
    21,
    13,
    7,
    18,
    22,
    7,
    14,
    39,
    8,
    7,
    12,
    21,
    20,
    22,
    20,
    14,
    14,
    15,
    23,
    33,
    17,
    17,
    13,
    51,
    5,
    16,
    6,
    47,
    3,
    5,
    18,
    7,
    10,
    11,
    11,
    14,
    14,
    18,
    34,
    8,
    6,
    11,
    13,
    37,
    23,
    16,
    4,
    13,
    19,
    11,
    3,
    23,
    14,
    24,
    16,
    18,
    26,
    28,
    25,
    13,
    18,
    21,
    13,
    14,
    8,
    3,
    27,
    17,
    3,
    15,
    8,
    30,
    0,
    10,
    13,
    11,
    52,
    19,
    2,
    17,
    12,
    20,
    2,
    23,
    16,
    19,
    18,
    11,
    34,
    14,
    43,
    14,
    29,
    31,
    10,
    3,
    5,
    11,
    0,
    5,
    5,
    7,
    25,
    3,
    15,
    18,
    13,
    26,
    17,
    21,
    28,
    5,
    14,
    29,
    13,
    13,
    21,
    15,
    7,
    10,
    33,
    5,
    2,
    9,
    7,
    16,
    20,
    13,
    10,
    15,
    8,
    48,
    28,
    13,
    20,
    7,
    9,
    21,
    25,
    6,
    6,
    43,
    30,
    11,
    14,
    6,
    16,
    24,
    10,
    20,
    13,
    16,
    21,
    15,
    12,
    11,
    19,
    22,
    7,
    15,
    14,
    7,
    22,
    24,
    19,
    25,
    0,
    14,
    17,
    16,
    11,
    6,
    21,
    43,
    10,
    19,
    5,
    9,
    22,
    3,
    7,
    43,
    12,
    10,
    9,
    10,
    24,
    34,
    14,
    12,
    15,
    14,
    21,
    23,
    2,
    15,
    5,
    22,
    6,
    9,
    45,
    11,
    20,
    23,
    11,
    14,
    23,
    26,
    8,
    16,
    14,
    5,
    14,
    24,
    6,
    6,
    18,
    18,
    10,
    24,
    11,
    13,
    19,
    36,
    1,
    11,
    18,
    17,
    1,
    21,
    14,
    24,
    28,
    14,
    23,
    16,
    4,
    39,
    23,
    15,
    15,
    11,
    21,
    26,
    8,
    19,
    7,
    14,
    10,
    33,
    7,
    0,
    10,
    26,
    23,
    21,
    36,
    26,
    29,
    2,
    35,
    12,
    31,
    14,
    40,
    3,
    8,
    16,
    11,
    29,
    4,
    26,
    34,
    14,
    13,
    20,
    12,
    42,
    11,
    14,
    14,
    19,
    46,
    22,
    16,
    8,
    19,
    13,
    17,
    20,
    15,
    6,
    13,
    10,
    10,
    21,
    13,
    5,
    8,
    8,
    8,
    11,
    13,
    17,
    19,
    9,
    2,
    26,
    16,
    9,
    5,
    18,
    13,
    16,
    0,
    29,
    14,
    12,
    12,
    16,
    20,
    12,
    17,
    11,
    15,
    18,
    15,
    5,
    14,
    3,
    23,
    26,
    4,
    10,
    1,
    5,
    21,
    29,
    20,
    37,
    28,
    13,
    21,
    8,
    13,
    6,
    18,
    20,
    7,
    1,
    14,
    26,
    20,
    36,
    0,
    20,
    29,
    12,
    12,
    7,
    18,
    22,
    19,
    15,
    11,
    8,
    27,
    19,
    5,
    22,
    21,
    31,
    26,
    16,
    17,
    12,
    34,
    18,
    11,
    1,
    17,
    5,
    1,
    24,
    4,
    18,
    19,
    10,
    22,
    8,
    21,
    12,
    13,
    3,
    1,
    12,
    22,
    17,
    17,
    17,
    50,
    11,
    8,
    15,
    3,
    6,
    23,
    16,
    10,
    25,
    54,
    44,
    6,
    22,
    6,
    33,
    14,
    8,
    10,
    17,
    25,
    19,
    9,
    2,
    13,
    11,
    11,
    11,
    6,
    13,
    6,
    18,
    40,
    15,
    15,
    12,
    14,
    9,
    11,
    14,
    3,
    8,
    7,
    43,
    14,
    4,
    0,
    18,
    23,
    14,
    12,
    13,
    4,
    10,
    11,
    13,
    23,
    15,
    5,
    3,
    21,
    7,
    1,
    35,
    24,
    6,
    14,
    21,
    26,
    13,
    18,
    15,
    13,
    14,
    21,
    16,
    18,
    18,
    12,
    17,
    16,
    9,
    18,
    24,
    9,
    13,
    8,
    20,
    11,
    6,
    17,
    4,
    21,
    34,
    8,
    3,
    7,
    8,
    13,
    10,
    18,
    13,
    31,
    18,
    10,
    9,
    23,
    0,
    29,
    7,
    12,
    53]
    num_bins = 10
    n, bins, patches = plt.hist(numbers, num_bins, facecolor='blue', alpha=0.5, edgecolor='black', linewidth=0.5)
    plt.title('Number of unique search terms per politician')
    plt.show()

def make_plots(data):
 #   make_pie(data)
    # pie_words(data)
    # make_pie_state(data)
    # make_histogram(data)
    make_histogram_words(data)

def main():
    data = get_data(filename=FILENAME)
    make_plots(data=data)

if __name__ == "__main__":
    main()
